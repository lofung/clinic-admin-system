{"version":3,"sources":["components/navbar.js","components/editEntryModal.js","components/displayTimeTable.js","components/create-entry.js","components/statistics.js","components/doctorList.js","components/clinicList.js","App.js","index.js"],"names":["Navbar","className","to","this","props","sessionIsAdmin","href","sessionDisplayName","Component","Modal","open","data","onClose","useState","doctorList","setDoctorList","clinicList","setClinicList","id","setId","doctor","setDoctor","clinic","setClinic","date","setDate","ampm","setAmpm","error","setError","weight","setWeight","getDoctorList","a","fetch","response","json","jsonData","getColNoRepeat","rows","console","message","getClinicList","matrix","col","column","i","length","push","Set","filter","el","onSubmitEdit","entry","event_id","method","headers","body","JSON","stringify","closeWindow","useEffect","am","document","editForm","value","ReactDom","createPortal","name","onSubmit","e","undefined","disabled","onChange","target","required","selected","map","idx","type","step","defaultValue","onClick","getElementById","DisplayTimeTable","monthArray","setMonthArray","setData","isFormOpen","setIsFormOpen","tempData","setTempData","doctorDropStart","input","onDrop","obj","tempObj","Object","assign","deleteEntry","log","window","confirm","changeMonth","pad","n","width","z","Array","join","editEntry","day","thisMonth","split","thisYear","emptyDays","Date","getDay","daysInMonth","getDate","tempArray","resultArray","slice","answer","toISOString","navigator","userAgent","indexOf","style","color","substring","print","align","margin","week","border","onDragOver","preventDefault","onDragEnter","index","minHeight","overflow","element","draggable","onDragStart","CreateEntry","titles","setTitles","entries","setEntries","getEventList","fields","newEntry","config","axios","post","goToEditEntry","addDateByOne","addEntries","title","padding","Statistics","clinicArray","setClinicArray","drArray","setDrArray","loadData","startMonth","endMonth","sort","dr","indexx","reduce","acc","curr","DoctorList","editId","setEditId","regName","setRegName","isAdmin","setIsAdmin","displayName","setDisplayName","password","setPassword","rePassword","setRePassword","prevRegName","setPrevRegName","prevDisplayName","setPrevDisplayName","submitEditDoctor","deleteDoctor","deleteTodo","placeholder","checked","login_id","ClinicList","clinicName","setClinicName","weekday","setWeekday","prevClinicName","setPrevClinicName","prevAmpm","setPrevAmpm","prevWeekday","setPrevWeekday","clearForm","deleteClinic","list","clinic_name","clinic_id","App","userName","setUserName","fetchLoginData","loginData","doc_name","is_admin","path","exact","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.5bb33075.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Navbar extends Component {\r\n\r\n\r\n  render() {\r\n    //console.log(this.props)\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n        <Link to=\"/\" className=\"navbar-brand\">Timetable Manager</Link>\r\n        <div className=\"collpase navbar-collapse\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"navbar-item\">\r\n          <Link to=\"/\" className=\"nav-link\">Timetable</Link>\r\n          </li>\r\n          <li className=\"navbar-item\">\r\n          <Link to=\"/statistics\" className=\"nav-link\">Statistics</Link>\r\n          </li>\r\n          {this.props.sessionIsAdmin?<li className=\"navbar-item\">\r\n          <Link to=\"/create\" className=\"nav-link\">Create Entry</Link>\r\n          </li>:\"\"}\r\n          {this.props.sessionIsAdmin?<li className=\"navbar-item\">\r\n          <Link to=\"/doctorlist\" className=\"nav-link\">Doctor List</Link>\r\n          </li>:\"\"}\r\n          {this.props.sessionIsAdmin?<li className=\"navbar-item\">\r\n          <Link to=\"/cliniclist\" className=\"nav-link\">Clinic List</Link>\r\n          </li>:\"\"}\r\n        </ul>\r\n        <ul className=\"navbar-nav navbar-right\" /* navbar-right make things right! */>\r\n          <li className=\"navbar-item\">\r\n          <a href=\"/auth/logout\" className=\"nav-link\">Logout, {this.props.sessionDisplayName}</a>\r\n          </li>\r\n        </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport './overlay.css';\r\n\r\nexport default function Modal({ open, data, onClose }) {\r\n    const [doctorList, setDoctorList] = useState([]);\r\n    const [clinicList, setClinicList] = useState([]);\r\n    const [id, setId] = useState(\"\");\r\n    const [doctor, setDoctor] = useState(\"\");\r\n    const [clinic, setClinic] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [ampm, setAmpm] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [weight, setWeight] = useState(\"\");\r\n\r\n    const getDoctorList = async () => {\r\n        try {\r\n            const response = await fetch(\"/api/v1/doctorlist\");\r\n            const jsonData = await response.json();\r\n            //console.log(jsonData);\r\n            //setDoctorTable(jsonData.rows);\r\n            //console.log(titles);\r\n            //console.log(entries);\r\n            setDoctorList(getColNoRepeat(jsonData.rows, \"doc_name\"));\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const getClinicList = async () => {\r\n        try {\r\n            const response = await fetch(\"/api/v1/cliniclist\");\r\n            const jsonData = await response.json();\r\n            //console.log(jsonData);\r\n            //setClinicTable(jsonData.rows);\r\n            //console.log(titles);\r\n            //console.log(\"get clinic test list\");\r\n            //console.log(entries);\r\n            setClinicList(getColNoRepeat(jsonData.rows, \"clinic_name\"));\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    function getColNoRepeat(matrix, col) {\r\n        let column = [];\r\n        for (let i = 0; i < matrix.length; i++) {\r\n            column.push(matrix[i][col])\r\n        }\r\n        //flattern array\r\n        column = [...new Set(column)];\r\n        column = column.filter(function (el) {\r\n            return el != \"\";\r\n        })\r\n        return column\r\n        //return unique values\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        //e.preventDefault(); cannot prevent default!!\r\n        //console.log(\"ampm is \" + ampm)\r\n        var am;\r\n        if (ampm == \"am\") {am = true}\r\n        else if (ampm == \"pm\") {am = false}\r\n        else {setError(\"ampm value is invalid\");return 1;}\r\n        //console.log(\"data here is \" + { \"id\": data.entry_id, doctor, clinic, date, am, weight})\r\n        //alert(id)\r\n        if (id==undefined) { setId(\"CREATE_NEW_ENTRY\")}\r\n        if (weight==undefined || weight==\"\") { setWeight(1) }\r\n        const newEntry = {\r\n            id,\r\n            doctor,\r\n            clinic,\r\n            date,\r\n            am,\r\n            weight\r\n        }\r\n        //console.log(\"new entry is \" + JSON.stringify(newEntry))\r\n        onSubmitEdit(newEntry);\r\n        return 0;\r\n    }\r\n    \r\n    const onSubmitEdit = async (entry) => {\r\n        //const { id } = req.params;\r\n        //console.log(req.body)\r\n        //const { regName, displayName, password } = req.body;\r\n        //console.log(\"on submit edit\")\r\n\r\n        try {\r\n            const response = await fetch(`/api/v1/event/${data.event_id}`, {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(entry)\r\n            });\r\n            closeWindow();\r\n            //console.log(response);\r\n            //clearForm(); what is this????\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const closeWindow = () => {\r\n        onClose();\r\n        setDoctorList([]);\r\n        setClinicList([]);\r\n        setDoctor(\"\");\r\n        setClinic(\"\");\r\n        setDate(\"\");\r\n        setAmpm(\"\");\r\n        setError(\"\");\r\n        setWeight(\"\");\r\n        setId(\"\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        //get possible doctor and clinic list\r\n        getDoctorList();\r\n        getClinicList();\r\n        //console.log(data)\r\n        setDoctor(data.doctor)\r\n        //if(data.doctor) {document.getElementById(\"doctorSelect\").value = data.doctor};\r\n        setClinic(data.clinic)\r\n        //if(data.clinic) {document.getElementById(\"clinicSelect\").value = data.clinic};\r\n        setDate(data.date)\r\n        setWeight(data.weight)\r\n        setId(data.event_id)\r\n        if (data.am == true) { setAmpm(\"am\"); document.editForm.ampm.value = \"am\"}\r\n        if (data.am == false) { setAmpm(\"pm\"); document.editForm.ampm.value = \"pm\"}\r\n    }, [data]);\r\n\r\n\r\n\r\n    if (!open) { return null }\r\n\r\n    else {\r\n        return ReactDom.createPortal(\r\n            <>\r\n                <div className=\"overlay\" />\r\n                <div className=\"formStyle\">\r\n                    {JSON.stringify(data)}\r\n                    <form name=\"editForm\" onSubmit={onSubmit}>\r\n                        <div>\r\n                            <label>Entry ID　</label>\r\n                            <input id=\"idSelect\" disabled value={data.event_id}></input>\r\n                        </div>\r\n                        <div>\r\n                            <label>Doctor　</label>\r\n                            <select id=\"doctorSelect\" value={doctor} onChange={(e) => setDoctor(e.target.value)} required>\r\n                                <option selected=\"true\" disabled=\"disabled\" value=\"\">Select Doctor</option>\r\n                                {doctorList.map((data, idx) => (\r\n                                    <option key={`${data}ak47${idx}`} value={data}>{data}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                        <div>\r\n                            <label>Clinic　</label>\r\n                            <select id=\"clinicSelect\" value={clinic} onChange={(e) => setClinic(e.target.value)} required>\r\n                                <option selected=\"true\" disabled=\"disabled\" value=\"\">Select Clinic</option>\r\n                                {clinicList.map((data, idx) => (\r\n                                    <option key={`${data}ak47c${idx}`} value={data}>{data}</option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                        <div>\r\n                            <label>Date　</label>\r\n                            <input type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} required></input>\r\n                        </div>\r\n                        <div>\r\n                            <label>　AM　</label>\r\n                            <input type=\"radio\" id=\"am\" name=\"ampm\" value=\"am\" onChange={() => setAmpm(\"am\")}></input>\r\n                            <label>　PM　</label>\r\n                            <input type=\"radio\" id=\"pm\" name=\"ampm\" value=\"pm\" onChange={() => setAmpm(\"pm\")}></input>\r\n                        </div>\r\n                        <div>\r\n                            <label>Weight　</label>\r\n                            <input type=\"number\" step=\"0.01\" id=\"weightSelect\" value={weight} onChange={(e) => setWeight(e.target.value)} defaultValue={data.weight}></input>\r\n                        </div>\r\n                        <button>Submit</button>\r\n                        <div>\r\n                            {error}<br />\r\n                        </div>\r\n                    </form>\r\n                    <button className=\"cancel\" onClick={() => closeWindow()}>cancel</button>\r\n                </div>\r\n            </>,\r\n            document.getElementById('portal')\r\n        )\r\n    }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport \"../App.css\"\r\nimport Modal from './editEntryModal'\r\n//import TimetableEntry from \"./timetableEntry.js\";\r\n\r\n\r\n\r\nexport const DisplayTimeTable = ({sessionIsAdmin, sessionDisplayName}) => {\r\n\r\n    \r\n    const [monthArray, setMonthArray] = useState([//initial\r\n        [0,0,0,0,0,0]\r\n    ])\r\n    const [data, setData] = useState([]);\r\n    const [isFormOpen, setIsFormOpen] = useState(false);\r\n    const [tempData, setTempData] = useState(0);\r\n\r\n    \r\n    function doctorDropStart(input) {\r\n        //console.log(\"drag start \" + input.id)\r\n        input.event_id = input.id\r\n        input.doctor = data.filter(entry=>entry.event_id===input.id)[0]['doctor']\r\n\r\n        setTempData(input);\r\n    }\r\n\r\n    function onDrop(obj) {\r\n        //console.log(\"dropping in \" + obj.am + \" \" + obj.date)\r\n        let tempObj = Object.assign({}, tempData);\r\n        tempObj.am = obj.am\r\n        tempObj.date = obj.date\r\n        tempObj.weight = 1\r\n        if(obj.clinic) {tempObj.clinic = obj.clinic}\r\n        setTempData(tempObj)\r\n        setIsFormOpen(true);\r\n    }\r\n\r\n    async function deleteEntry (id) {\r\n        //get id from the object, and then delete things from it\r\n        console.log(\"we are deleting this entry! \" + id);\r\n        if (window.confirm(\"Are you sure you want to delete?\")){\r\n            //ask before delete\r\n            try {\r\n                const deleteTodo = await fetch (`/api/v1/event/${id}`,{\r\n                    method: \"DELETE\"\r\n                });\r\n                changeMonth({\r\n                    target:{\r\n                        value: document.getElementById('monthSelector').value\r\n                        //forcing the current date into object even when target is not here\r\n                        //bad pracitse, but deal with it!!\r\n                        //if you call changeMonth must add this line,\r\n                        //or otherwise you can copy below in modal\r\n                    }\r\n                });\r\n                //console.log(deleteTodo);\r\n            } catch (err) {\r\n                console.error(err.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function pad(n, width, z) { //for padding zeros https://stackoverflow.com/questions/10073699/pad-a-number-with-leading-zeros-in-javascript\r\n        z = z || '0';\r\n        n = n + '';\r\n        return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n      }\r\n\r\n    function editEntry (obj) {\r\n        //get id from the object, and then recall everything in the form\r\n        //console.log(\"we are editing this entry! \" + JSON.stringify(obj));\r\n        if (obj.id === undefined){\r\n            obj.event_id = \"CREATE_NEW_ENTRY\";\r\n            //console.log(\"creating entry because no id!!!\")\r\n            if (obj.clinic === undefined){\r\n                obj.clinic = \"\"\r\n            }\r\n            if (obj.doctor === undefined){\r\n                obj.doctor = \"\"\r\n            }\r\n            if (obj.am === undefined){\r\n                obj.am = \"\"\r\n            }\r\n            obj.date = document.getElementById(\"monthSelector\").value + \"-\" + pad(obj.day, 2) //must use pad(X, 2) to pad number to 02 for date to work\r\n            if (obj.weight === undefined){\r\n                obj.weight = 1\r\n            }\r\n        } else {\r\n            obj = data.filter(entry => entry.event_id===obj.id)[0];\r\n        }\r\n        //console.log(obj.date)\r\n        //console.log(typeof obj.date)\r\n        setTempData(obj);\r\n        setIsFormOpen(true);\r\n\r\n    }\r\n\r\n\r\n    async function changeMonth (e) {\r\n        //console.log(e.target.value);\r\n        //console.log(new Date(e.target.value+\"-01\").getDay());\r\n        let thisMonth = e.target.value.split(\"-\")[1]\r\n        let thisYear = e.target.value.split(\"-\")[0]\r\n        let emptyDays = new Date(thisYear + \"-\" + thisMonth +\"-01\").getDay();\r\n        //6-Saturday\r\n        let daysInMonth = new Date(thisYear, thisMonth, 0).getDate();\r\n        //console.log(daysInMonth)\r\n        let tempArray = []\r\n        for (let i=0; i<emptyDays; i++){ tempArray.push(0) }; //add empty days in array\r\n        for (let i=0; i<daysInMonth; i++) { tempArray.push(i+1)}; //add normal days in array\r\n        //console.log(tempArray);\r\n        //console.log(tempArray.slice(0,7));\r\n        let resultArray = [];\r\n        for (let i=0; i<tempArray.length; i=i+7){\r\n            resultArray.push(tempArray.slice(i,i+7));\r\n        }\r\n\r\n        //console.log(resultArray);\r\n        setMonthArray(resultArray);\r\n        try {\r\n            const response = await fetch(`/api/v1/?query=${thisYear}-${thisMonth}`);\r\n            const answer = await response.json();\r\n            //console.log(answer);\r\n            if (answer){\r\n                setData(answer.rows)\r\n            }\r\n\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    useEffect(() =>{\r\n        changeMonth({\r\n            target:{\r\n                value: new Date(2020, 11, 1).toISOString().split(\"T\")[0]\r\n                //forcing the current date into object even when target is not here\r\n                //bad pracitse, but deal with it!!\r\n                //if you call changeMonth must add this line,\r\n                //or otherwise you can copy below in modal\r\n            }\r\n        });\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {/*sessionDisplayName} admin? {/*sessionIsAdmin?\"true\":\"false\"*/}{/*JSON.stringify(data)*/}{/*JSON.stringify(tempData)*/}\r\n            <Modal data={tempData} open={isFormOpen} onClose={() => {setIsFormOpen(false); setTempData({}); \r\n                changeMonth({target:{value: document.getElementById('monthSelector').value\r\n                        //forcing the current date into object even when target is not here\r\n                    }\r\n                })}} />\r\n            <div>\r\n            {navigator.userAgent.indexOf(\"Firefox\") != -1 ?<small style={{color:\"red\"}}>\"The month selection table is not supported in FireFox as in 11/2020. Please select month by typing in manually e.g. 2020-11\"<br /></small>:\"\"}\r\n                <input type=\"month\" \r\n                    id=\"monthSelector\"\r\n                    defaultValue={new Date(2020, 11, 1).toISOString().substring(0, 7)}\r\n                    onChange={changeMonth}>\r\n                </input>\r\n                <button onClick={()=>window.print()}>Print</button>\r\n                <h3 align=\"center\">Roster</h3>\r\n                {/* JSON.stringify(data) */}\r\n                {/*Array.isArray(data)?\"true\":\"false\"*/}\r\n                <br />\r\n                {/* load warning signal for firefix, since does not have feature for monthy selector */}\r\n                \r\n            </div>\r\n            <div>Hover on the am/pm, clinic name, or doctor name box for editing and deleting entries (all account has such right)</div>\r\n            <br />\r\n            <div>You may also drag any doctor box into clinics or am/pm box, that would edit the doctor entry for you. You can take a look at the edited entry before you submit the change.</div>\r\n            <br />\r\n            <div style={{margin: 'auto'}}>\r\n                <table style={{width: '100%'}}>\r\n                    <thead id=\"tableHead\">\r\n                        <tr>\r\n                            <th style={{width: \"14%\"}}>Sunday</th>\r\n                            <th style={{width: \"14%\"}}>Monday</th>\r\n                            <th style={{width: \"14%\"}}>Tuesday</th>\r\n                            <th style={{width: \"14%\"}}>Wednesday</th>\r\n                            <th style={{width: \"14%\"}}>Thursday</th>\r\n                            <th style={{width: \"14%\"}}>Friday</th>\r\n                            <th style={{width: \"14%\"}}>Saturday</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {monthArray.map((week, idx) => \r\n                        <tr key={week + idx}>\r\n                            {week.map((day) => \r\n                                <td style={{\"verticalAlign\": \"top\"}}>\r\n                                    {day==0?\"\":<><b>{day}</b>\r\n                                    <table style={{width: \"90%\"}}>\r\n                                        <tbody style={{border:'1px solid #d3d3d3'}}>\r\n                                            <tr>\r\n                                                <th className=\"selectBox\" onDrop={()=>onDrop({\"am\": true, \"date\":document.getElementById(\"monthSelector\").value + \"-\" + pad(day, 2)})} onDragOver={(e)=>e.preventDefault()} onDragEnter={(e)=>e.preventDefault()}>\r\n                                                    am<button onClick={() => editEntry({day, \"am\": true})}  className=\"edit-btn\" />\r\n                                                </th>\r\n                                            </tr>\r\n                                            {}\r\n                                            {data.filter(entry => entry.am === true)\r\n                                                .filter(entry => entry.date.split(\"-\")[2] == day).length>0?\r\n                                                [...new Set(data.filter(entry => entry.am === true)\r\n                                                .filter(entry => entry.date.split(\"-\")[2] == day)\r\n                                                .map(entry => entry.clinic))]\r\n                                                .map((clinic, index) =>\r\n                                                    <tr><td key={clinic + week + idx + index + \"am\"} style={{ minHeight: \"50px\", overflow: \"hidden\" }}><span onDrop={()=>onDrop({\"am\": true, \"clinic\": clinic,\"date\":document.getElementById(\"monthSelector\").value + \"-\" + pad(day, 2)})}  onDragOver={(e)=>e.preventDefault()} onDragEnter={(e)=>e.preventDefault()}>{clinic}<button className=\"edit-btn\"  onClick={() => editEntry({day, \"am\": true, clinic})}  /></span><br/>\r\n                                                        {\r\n                                                            data.filter(element => element.am === true)\r\n                                                                .filter(element => element.date.split(\"-\")[2] == day)\r\n                                                                .filter(element => element.clinic == clinic)\r\n                                                                .map(element =>\r\n                                                                    <span draggable=\"true\" onDragStart={() => doctorDropStart({id: element.event_id})}>{element.doctor}, <button onClick={() => editEntry({id: element.event_id})} className=\"edit-btn\" /><button onClick={() => deleteEntry(element.event_id)} className=\"delete-btn right-btn\" /></span>)\r\n                                                        }\r\n                                                    </td></tr>\r\n                                                ):\r\n                                                <tr><td style={{\"height\": \"50px\"}}></td></tr>}\r\n                                            <tr>\r\n                                                <th className=\"selectBox\" onDrop={()=>onDrop({\"am\": false, \"date\":document.getElementById(\"monthSelector\").value + \"-\" + pad(day, 2)})}  onDragOver={(e)=>e.preventDefault()} onDragEnter={(e)=>e.preventDefault()}>\r\n                                                    pm<button onClick={() => editEntry({day, \"am\": false})} className=\"edit-btn\" />\r\n                                                </th>\r\n                                            </tr>\r\n                                            {data.filter(entry => entry.am === false)\r\n                                            .filter(entry => entry.date.split(\"-\")[2] == day).length>0?\r\n                                            [...new Set(data.filter(entry => entry.am === false)\r\n                                                .filter(entry => entry.date.split(\"-\")[2] == day)\r\n                                                .map(entry => entry.clinic))]\r\n                                                .map((clinic, index) =>\r\n                                                    <tr><td key={clinic + week + idx + index + \"pm\"}><span onDrop={()=>onDrop({\"am\": false, \"clinic\": clinic,\"date\":document.getElementById(\"monthSelector\").value + \"-\" + pad(day, 2)})}  onDragOver={(e)=>e.preventDefault()} onDragEnter={(e)=>e.preventDefault()}>{clinic}<button onClick={() => editEntry({day, \"am\": false, clinic})}  className=\"edit-btn\" /></span><br/>\r\n                                                        {\r\n                                                            data.filter(element => element.am === false)\r\n                                                                .filter(element => element.date.split(\"-\")[2] == day)\r\n                                                                .filter(element => element.clinic == clinic)\r\n                                                                .map(element =>\r\n                                                                    <span draggable=\"true\" onDragStart={() => doctorDropStart({id: element.event_id})}>{element.doctor}, <button onClick={() => editEntry({id: element.event_id})} className=\"edit-btn\" /><button onClick={() => deleteEntry(element.event_id)} className=\"delete-btn right-btn\" /></span>)\r\n                                                        }\r\n                                                    </td></tr>\r\n                                                ):\r\n                                                <tr><td style={{\"height\": \"50px\"}}></td></tr>}\r\n                                        </tbody>\r\n                                    </table></>}\r\n                                </td>\r\n                            )}\r\n                        </tr>\r\n                    )}</tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default DisplayTimeTable","import React, {useState, useEffect} from 'react'\r\nimport axios from \"axios\"\r\n\r\nexport const CreateEntry = ({ sessionIsAdmin, sessionDisplayName }) => {\r\n    const [doctorList, setDoctorList] = useState([]);\r\n    const [clinicList, setClinicList] = useState([]);\r\n    const [titles, setTitles] = useState([]);\r\n    const [entries, setEntries] = useState([]);\r\n    const [id, setId] = useState(\"CREATE_NEW_ENTRY\");\r\n    const [doctor, setDoctor] = useState(\"\");\r\n    const [clinic, setClinic] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [ampm, setAmpm] = useState(\"\");\r\n    const [weight, setWeight] = useState(1);\r\n    const [error, setError] = useState(\"\");\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newEntry = {\r\n            id,\r\n            doctor,\r\n            clinic,\r\n            date,\r\n            am: ampm==\"am\"?true:false,\r\n            weight\r\n        }\r\n        if (id===\"CREATE_NEW_ENTRY\") {addEntries(newEntry)}\r\n        else {goToEditEntry(newEntry)};\r\n        return 0;\r\n    }\r\n\r\n    const getEventList = async () => {\r\n        try {\r\n            const response = await fetch(\"/api/v1/\");\r\n            const jsonData = await response.json();\r\n            //console.log(jsonData);\r\n            setTitles(jsonData.fields);\r\n            setEntries(jsonData.rows);\r\n            //console.log(titles);\r\n            //console.log(entries);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    function getColNoRepeat(matrix, col){\r\n        let column = [];\r\n        for (let i=0; i<matrix.length; i++){\r\n            column.push(matrix[i][col])\r\n        }\r\n        //flattern array\r\n        column = [...new Set(column)];\r\n        column = column.filter(function (el){\r\n            return el!=\"\";\r\n        })\r\n        return column\r\n        //return unique values\r\n    }\r\n\r\n    async function addEntries(newEntry) {\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': \"application/json\"\r\n            }\r\n        }\r\n        try {\r\n            const res = await axios.post('/api/v1/', newEntry, config);\r\n            //console.log(res) //new object from post\r\n            setError(\"SUCCESS\")\r\n            //1:03:37 EXPRESS API\r\n            getEventList();\r\n            closeWindow();\r\n        } catch (err) {\r\n            console.log(err.response.data.error);\r\n            console.log(\"SEND ERROR\");\r\n            setError(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    const goToEditEntry = () => {\r\n        //e.preventDefault(); cannot prevent default!!\r\n        //console.log(\"ampm is \" + ampm)\r\n        var am;\r\n        if (ampm == \"am\") {am = true}\r\n        else if (ampm == \"pm\") {am = false}\r\n        else {setError(\"ampm value is invalid\");return 1;}\r\n        //console.log(\"data here is \" + { id, doctor, clinic, date, am, weight})\r\n        //alert(id)\r\n        if (id==undefined) { setId(\"CREATE_NEW_ENTRY\")}\r\n        if (weight==undefined || weight==\"\") { setWeight(1) }\r\n        const newEntry = {\r\n            id,\r\n            doctor,\r\n            clinic,\r\n            date,\r\n            am,\r\n            weight\r\n        }\r\n        //console.log(\"new entry is \" + JSON.stringify(newEntry))\r\n        onSubmitEdit(newEntry);\r\n        return 0;\r\n    }\r\n    \r\n    const onSubmitEdit = async (entry) => {\r\n        //const { id } = req.params;\r\n        //console.log(req.body)\r\n        //const { regName, displayName, password } = req.body;\r\n        //console.log(\"on submit edit\")\r\n\r\n        try {\r\n            const response = await fetch(`/api/v1/event/${id}`, {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(entry)\r\n            });\r\n            getEventList();\r\n            closeWindow();\r\n            //console.log(response);\r\n            //clearForm(); what is this????\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    async function editEntry(id) {\r\n        setId(id);\r\n        setDoctor(entries[id][\"doctor\"]);\r\n        //console.log(entries[id][\"doctor\"])\r\n        setClinic(entries[id][\"clinic\"]);\r\n        setDate(entries[id][\"date\"].split(\"T\")[0]);\r\n        setWeight(entries[id][\"weight\"])\r\n        if (entries[id][\"am\"] == true) { setAmpm(\"am\"); document.editForm.ampm.value = \"am\"}\r\n        if (entries[id][\"am\"] == false) { setAmpm(\"pm\"); document.editForm.ampm.value = \"pm\"}\r\n    }\r\n\r\n    const deleteEntry = async(id) => {\r\n        if (window.confirm(\"Are you sure you want to delete?\")){\r\n            //ask before delete\r\n            try {\r\n                const deleteTodo = await fetch (`/api/v1/event/${id}`,{\r\n                    method: \"DELETE\"\r\n                });\r\n                await getEventList();\r\n                //console.log(deleteTodo);\r\n            } catch (err) {\r\n                console.error(err.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    const addDateByOne = (date) => {\r\n        //very string behaviour by javascript\r\n        //one day off and i do not even know why\r\n        let answer = date.split(\"T\")[0];\r\n        answer = new Date(answer);\r\n        answer.setDate(answer.getDate()+1);\r\n        //console.log(answer)\r\n        return answer.toISOString().split(\"T\")[0]\r\n    }\r\n\r\n    const getDoctorList = async () => {\r\n        try {\r\n            const response = await fetch(\"/api/v1/doctorlist\");\r\n            const jsonData = await response.json();\r\n            //console.log(titles);\r\n            //console.log(entries);\r\n            setDoctorList(getColNoRepeat(jsonData.rows, \"doc_name\"));\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const getClinicList = async () => {\r\n        try {\r\n            const response = await fetch(\"/api/v1/cliniclist\");\r\n            const jsonData = await response.json();\r\n            //console.log(jsonData);\r\n            //console.log(titles);\r\n            //console.log(\"get clinic test list\");\r\n            //console.log(entries);\r\n            setClinicList(getColNoRepeat(jsonData.rows, \"clinic_name\"));\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const closeWindow = () => {\r\n        setDoctor(\"\");\r\n        setClinic(\"\");\r\n        setDate(\"\");\r\n        setAmpm(\"\");\r\n        setError(\"\");\r\n        setWeight(\"\");\r\n        setId(\"\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        //console.log(\"this is admin \" +sessionIsAdmin);\r\n        //console.log(\"this is display name \" +sessionDisplayName)\r\n        getDoctorList();\r\n        getClinicList();\r\n        getEventList();\r\n        //console.log(doctorTable);\r\n        //console.log(clinicTable);\r\n    }, []);\r\n    \r\n    if (sessionIsAdmin === true) {\r\n    return (\r\n        <div>\r\n            {/* JSON.stringify(entries) */}{/*sessionIsAdmin}{sessionDisplayName*/}\r\n            <form name=\"editForm\" onSubmit={onSubmit}>\r\n                <div>\r\n                    <div>\r\n                        <label>Entry ID　</label>\r\n                        <input id=\"idSelect\" disabled value={id}></input>\r\n                    </div>\r\n                    <label>Doctor　{doctor}</label>  \r\n                    <select id=\"chooseDoctor\" value={doctor} onChange={(e) => setDoctor(e.target.value)} required>\r\n                        <option id=\"disabledDoctor\" selected=\"true\" disabled=\"disabled\" value=\"\">Select Doctor</option>\r\n                        {doctorList.map((data, idx ) => (\r\n                            <option key={`${data}ak47${idx}`} value={data}>{data}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Clinic　</label>  \r\n                    <select value={clinic} onChange={(e) => setClinic(e.target.value)} required>\r\n                    <option disabled=\"disabled\" selected=\"true\" value=\"\">Select Clinic</option>\r\n                    {/* Warning: Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>. HAS TO BE delibrately offented to make selecting disabled option work*/}\r\n                        {clinicList.map((data, idx ) => (\r\n                            <option key={`${data}ak47c${idx}`} value={data}>{data}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <label>Date　</label>  \r\n                    <input type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} required></input>\r\n                </div>\r\n                <div>\r\n                    <label>　AM　</label>  \r\n                    <input id=\"am\" type=\"radio\" name=\"ampm\" value=\"am\" onChange={() => setAmpm(\"am\")}></input>\r\n                    <label>　PM　</label>  \r\n                    <input id=\"pm\" type=\"radio\" name=\"ampm\" value=\"pm\" onChange={() => setAmpm(\"pm\")}></input>\r\n                </div>\r\n                <div>\r\n                    <label>Weight　</label>\r\n                    <input type=\"number\" step=\"0.01\" id=\"weightSelect\" value={weight} onChange={(e) => setWeight(e.target.value)}></input>\r\n                </div>\r\n                    <button>Submit</button>\r\n                <div>\r\n                {id===\"CREATE_NEW_ENTRY\"?\"\":<button onClick={() => setId(\"CREATE_NEW_ENTRY\") }>Switch to entry creation</button>}\r\n                {/*JSON.stringify(doctorList)*/}{/*JSON.stringify(clinicList)*/}{/*date*/}{/* ampm */}{/*error*/}<br />\r\n                </div>\r\n            </form>\r\n            {error?error:\"\"}\r\n            \r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        {titles.map((title, idx) => \r\n                            <th key={`${title.name}`} style={{padding: \"15px\"}}>{title.name}</th>\r\n                        )}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {entries.map((entry, idx) => \r\n                        <tr key={`x4${idx}`}>\r\n                            <td key={`${titles[0].name}x0${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[0].name}`]}</td>\r\n                            <td key={`${titles[1].name}x1${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[1].name}`]}</td>\r\n                            <td key={`${titles[2].name}x2${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[2].name}`]}</td>\r\n                            <td key={`${titles[3].name}x3${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[3].name}`]===true?\"am\":entry[`${titles[3].name}`]===false?\"pm\":\"\"}</td>\r\n                            <td key={`${titles[4].name}x4${idx}`} style={{padding: \"15px\"}}>{addDateByOne(entry[`${titles[4].name}`])}</td>\r\n                            <td key={`${titles[5].name}x5${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[5].name}`]}</td>\r\n                            <td key={`x4${idx}`} style={{padding: \"15px\"}} onClick={() => editEntry(entry.event_id)}><button>EDIT</button></td>\r\n                            <td key={`x47${idx}`} style={{padding: \"15px\"}} onClick={() => deleteEntry(entry.event_id)}><button>x</button></td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    )} else {\r\n        return <div>Hello {sessionDisplayName}, you have no right to access this page. Please contact the admins for rights.</div>\r\n    }\r\n}\r\n\r\nexport default CreateEntry","import React, {useState, useEffect} from 'react'\r\n\r\nexport const Statistics = () => {\r\n    const [clinicArray, setClinicArray] = useState([\"\", \"A\",\"B\",\"C\",\"D\",\"E\",\"F\"])\r\n    const [drArray, setDrArray] =  useState([\"dr1\", \"dr2\", \"dr3\", \"dr4\", \"dr5\"])\r\n    const [data, setData] = useState([]);\r\n\r\n    async function loadData () {\r\n        let startMonth = document.getElementById(\"startMonthSelector\").value;\r\n        let endMonth = document.getElementById(\"endMonthSelector\").value;\r\n        //console.log(startMonth);\r\n        //console.log(endMonth);\r\n        try {\r\n            const response = await fetch(`/api/v1/?start=${startMonth}&end=${endMonth}`);\r\n            const answer = await response.json();\r\n            //console.log(answer);\r\n            setData(answer.rows);\r\n            setDrArray([...new Set(answer.rows.map(entry=>entry.doctor))].sort())\r\n            setClinicArray([...new Set(answer.rows.map(entry=>entry.clinic))].sort())\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    function getWeekDate (date) {\r\n        let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        return days[date.getDay()];\r\n    }\r\n\r\n    useEffect(() =>{\r\n        loadData();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <style type=\"text/css\">\r\n                {\"@media print{@page {size: landscape}}\"}\r\n            </style>\r\n            <div width=\"100%\">\r\n            {navigator.userAgent.indexOf(\"Firefox\") != -1 ?<small style={{color:\"red\"}}>\"The month selection table is not supported in FireFox as in 11/2020. Please select month by typing in manually e.g. 2020-11\"<br /></small>:\"\"}\r\n                <input type=\"month\" \r\n                    id=\"startMonthSelector\"\r\n                    defaultValue={new Date(2020, 1, 1).toISOString().substring(0, 7)}\r\n                    onChange={loadData}>\r\n                </input>\r\n                <button onClick={()=>window.print()}>Print</button>\r\n\r\n                <input type=\"month\" \r\n                id=\"endMonthSelector\"\r\n                defaultValue={new Date().toISOString().substring(0, 7)}\r\n                style={{\"float\": \"right\"}}\r\n                onChange={loadData}> \r\n                </input>{/*this make the box on the right*/}\r\n            </div>\r\n            <h3 align=\"center\">Statistics</h3>\r\n            <br />\r\n            <div>This tab is for discussion purposes. Since doctors care very much about a fair workload and who gets what leaves during holidays.</div>\r\n            <div>You may hover cursor on the respective number box for a detail breakdown of the numbers, \"so that no one did their data input wrong!\"</div>\r\n            <div>Hover the dates on the two sides of the screen for dates inclusive</div>\r\n            <table id=\"statTable\">\r\n                <thead>\r\n                    <tr>\r\n                        <th style={{\"width\":\"12%\", \"height\": \"40px\"}} ></th>\r\n                    {clinicArray.map((clinic, idx) => (\r\n                        <th style={{\"width\":\"10%\"}} key={clinic+\"111xy\"+idx}>{clinic}</th>\r\n                    ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {drArray.map((dr, indexx) =>(\r\n                    <tr key={dr+\"xyz\"+indexx}>\r\n                        <th>{dr}</th>\r\n                        {clinicArray.map((clinic, index) =>(\r\n                            <td style={{\"minWidth\":\"50px\", \"height\": \"40px\"}} key={clinic+\"xy\"+index}  className=\"selectBox\">\r\n                                {data.filter(entry => entry.clinic ==clinic)\r\n                                    .filter(entry=>entry.doctor==dr)\r\n                                    .reduce((acc, curr) => {return acc+curr.weight}, 0)}\r\n                                <span className=\"tooltiptext\">\r\n                                        {clinic} {dr}\r\n                                        {data.filter(entry => entry.clinic ==clinic)\r\n                                        .filter(entry=>entry.doctor==dr)\r\n                                        .map(entry => <div>{entry.date} {getWeekDate(new Date(entry.date))} weight={entry.weight}</div> )}\r\n                                </span>\r\n                             </td>\r\n                        ))}\r\n                        <td style={{\"width\":\"10%\", \"borderWidth\":\"1px 1px 1px 3px\",\"borderStyle\":\"ridge\"}}>\r\n                            {data.filter(entry=>entry.doctor==dr)\r\n                                .reduce((acc, curr) => {return acc+curr.weight}, 0)}\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n                    <tr>\r\n                        <td style={{\"borderStyle\":\"none\"}}></td>\r\n                    {clinicArray.map((clinic, idx) => (\r\n                        <td key={clinic+\"x\"+idx}\r\n                        style={{\"borderWidth\":\"3px 1px 1px 1px\",\"borderStyle\":\"ridge\"}}>{data.filter(entry=>entry.clinic==clinic)\r\n                                .reduce((acc, curr) => {return acc+curr.weight}, 0)}</td>\r\n                    ))}\r\n                    </tr>\r\n                </tbody>\r\n\r\n            </table>\r\n        {/*JSON.stringify(data) */} \r\n        {/* JSON.stringify(drArray) */}                   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statistics","import React, {useState, useEffect} from 'react'\r\n\r\nexport const DoctorList = ({ sessionIsAdmin, sessionDisplayName }) => {\r\n    const [editId, setEditId] = useState(\"\");\r\n    const [titles, setTitles] = useState([]);\r\n    const [entries, setEntries] = useState([]);\r\n    const [regName, setRegName] = useState(\"\");\r\n    const [isAdmin, setIsAdmin] = useState(false);\r\n    const [displayName, setDisplayName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [rePassword, setRePassword] = useState(\"\");\r\n    const [prevRegName, setPrevRegName] = useState(\"\");\r\n    const [prevDisplayName, setPrevDisplayName] = useState(\"\");\r\n\r\n    const getDoctorList = async () => {\r\n        try {\r\n            const response = await fetch(\"/api/v1/doctorlist\");\r\n            const jsonData = await response.json();\r\n            //console.log(jsonData);\r\n            setTitles(jsonData.fields);\r\n            setEntries(jsonData.rows);\r\n            //console.log(titles);\r\n            //console.log(entries);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n\r\n    const clearForm = () => {\r\n        setEditId(\"\");\r\n        setRegName(\"\");\r\n        setDisplayName(\"\");\r\n        setPassword(\"\");\r\n        setRePassword(\"\");\r\n        setPrevRegName(\"\");\r\n        setPrevDisplayName(\"\");\r\n        setIsAdmin(false);\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (editId!==\"\"){\r\n            submitEditDoctor(e);\r\n            return 0;\r\n        }\r\n        try {\r\n            const response = await fetch(\"/api/v1/doctorlist\", {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({ regName, displayName, password, isAdmin })\r\n            });\r\n            await getDoctorList();\r\n            //console.log(response);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const deleteDoctor = async (id) => {\r\n        if (window.confirm(\"Are you sure you want to delete?\")){\r\n            //ask before delete\r\n            try {\r\n                const deleteTodo = await fetch (`/api/v1/doctorlist/${id}`,{\r\n                    method: \"DELETE\"\r\n                });\r\n                await getDoctorList();\r\n                console.log(deleteTodo);\r\n            } catch (err) {\r\n                console.error(err.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    const submitEditDoctor = async (id) => {\r\n        console.log(\"hello world\")\r\n        try {\r\n            const response = await fetch(`/api/v1/doctorlist/${editId}`, {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({ regName, displayName, password })\r\n            });\r\n            await getDoctorList();\r\n            //console.log(response);\r\n            clearForm();\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDoctorList();\r\n    }, []);\r\n\r\n    if(sessionIsAdmin===true){\r\n    return (\r\n        <div>\r\n            <h4>{editId===\"\"?\"Add account (doctor or admin)\":\"Edit Account Details\"}</h4>\r\n\r\n            <form onSubmit={onSubmit}>\r\n                <div>\r\n                    <label>Set login name　</label>  \r\n                    <input type=\"text\" value={regName} onChange={(e) => setRegName(e.target.value)} placeholder=\"input login name\"></input> {prevRegName===\"\"?\"\":` (${prevRegName})`}\r\n                </div>\r\n                <div>\r\n                    <label>Set display name in roster and statistics　</label>  \r\n                    <input type=\"text\" value={displayName} onChange={(e) => setDisplayName(e.target.value)} placeholder=\"DO NOT input if no show at doctor list\"></input> {prevDisplayName===\"\"?\"\":` (${prevDisplayName})`}\r\n                </div>\r\n                <div>\r\n                    <label>Set password　</label>  \r\n                    <input type=\"text\" value={password} onChange={(e) => setPassword(e.target.value)} ></input>\r\n                </div>\r\n                <div>\r\n                    <label>Type password again　</label>  \r\n                    <input type=\"text\" value={rePassword} onChange={(e) => setRePassword(e.target.value)} ></input>\r\n                </div>\r\n                <div>\r\n                    <label>Admin Role　</label>  \r\n                    <input type=\"checkbox\" value={isAdmin} onChange={(e) => setIsAdmin(e.target.checked)} ></input>\r\n                </div>\r\n                    {password===rePassword?\r\n                    <button>Submit</button>:<h6 style={{color: \"red\"}}>Please type password again</h6>}\r\n                <div>\r\n                {/* regName */ }{/* displayName */}{/* password */}{/* \"he is admin \" + isAdmin */}<br />\r\n                </div>\r\n            </form>\r\n            <div>Instead of using indexes, the systems were intended to use the exact strings for reporting. Either the doctors wish to have an option deleted but the record remains, or some doctors would have tempers \"I do not want to see that name anymore!\"</div>\r\n            <br/>\r\n            <div>For an admin name to not show on the doctor selection menu in other pages, enter the display name as \"nothing, blank space\". As the doctor selection list flatterns the doctor list and removes any blank entry. The same is true for clinic selection list.</div>\r\n            {/* JSON.stringify(entries) */}\r\n            <br />\r\n            <h4>Current list</h4>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        {titles.map((title, idx) => \r\n                            <th key={`${title.name}`} style={{padding: \"15px\"}}>{title.name}</th>\r\n                        )}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {entries.map((entry, idx) => \r\n                        <tr key={`x4${idx}`}>\r\n                            <td key={`${titles[0].name}x0${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[0].name}`]}</td>\r\n                            <td key={`${titles[1].name}x1${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[1].name}`]}</td>\r\n                            <td key={`${titles[2].name}x2${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[2].name}`]}</td>\r\n                            <td key={`${titles[3].name}x3${idx}`} style={{padding: \"15px\"}}>****{/*entry[`${titles[3].name}`]*/}</td>\r\n                            <td key={`${titles[4].name}x4${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[4].name}`]===true?\"true\":entry[`${titles[4].name}`]===false?\"false\":\"\"}</td>\r\n                            {/*<td key={`x4${idx}`} style={{padding: \"15px\"}} onClick={() => editDoctor(idx)}><button>EDIT</button></td>*/}\r\n                            <td key={`x47${idx}`} style={{padding: \"15px\"}}>{entry.login_id===30||entry.login_id===32||entry.login_id===33?\"\":<button onClick={() => deleteDoctor(entry.login_id)}>x</button>}</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )} else {\r\n        return <div>Hello {sessionDisplayName}, you have no right to access this page. Please contact the admins for rights.</div>\r\n    }\r\n}\r\n\r\nexport default DoctorList","import React, {useState, useEffect} from 'react'\r\n\r\nexport const ClinicList = ({ sessionIsAdmin, sessionDisplayName }) => {\r\n    const [editId, setEditId] = useState(\"\");\r\n    const [titles, setTitles] = useState([]);\r\n    const [entries, setEntries] = useState([]);\r\n    const [clinicName, setClinicName] = useState(\"\");\r\n    const [ampm, setAmpm] = useState(\"\");\r\n    const [weekday, setWeekday] = useState(\"Monday\");\r\n    const [prevClinicName, setPrevClinicName] = useState(\"\");\r\n    const [prevAmpm, setPrevAmpm] = useState(\"\");\r\n    const [prevWeekday, setPrevWeekday] = useState(\"\");\r\n\r\n\r\n    const getClinicList = async () => {\r\n        try {\r\n            const response = await fetch(\"/api/v1/cliniclist\");\r\n            const jsonData = await response.json();\r\n            //console.log(jsonData);\r\n            setTitles(jsonData.fields);\r\n            setEntries(jsonData.rows);\r\n            //console.log(titles);\r\n            //console.log(\"get clinic test list\");\r\n            //console.log(entries);\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setEditId(\"\");\r\n        setClinicName(\"\");\r\n        setAmpm(\"\");\r\n        setWeekday(\"Monday\");\r\n        setPrevClinicName(\"\");\r\n        setPrevAmpm(\"\");\r\n        setPrevWeekday(\"\");\r\n        document.getElementById('buttonAM').checked = false;\r\n        document.getElementById('buttonPM').checked = false;\r\n    }\r\n\r\n    \r\n    useEffect(getClinicList, []);\r\n\r\n    const onSubmit = async (e) => {\r\n        //console.log(\"ampm is \" + ampm)\r\n        e.preventDefault();\r\n        if (editId!==\"\"){\r\n            onSubmitEdit(e);\r\n            return 0;\r\n        }\r\n        try {\r\n            const response = await fetch(\"/api/v1/cliniclist\", {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({ clinicName, ampm, weekday })\r\n            });\r\n            await getClinicList();\r\n            //console.log(response);\r\n            clearForm();\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const onSubmitEdit = async (e) => {\r\n        e.preventDefault();\r\n        //console.log(\"on submit edit\")\r\n        //console.log(\"ampm is \" + ampm)\r\n        try {\r\n            const response = await fetch(`/api/v1/cliniclist/${editId}`, {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({ editId, clinicName, ampm, weekday })\r\n            });\r\n            await getClinicList();\r\n            //console.log(response);\r\n            clearForm();\r\n        } catch (err) {\r\n            console.error(err.message);\r\n        }\r\n    }\r\n\r\n    const deleteClinic = async (id) => {\r\n        if (window.confirm(\"Are you sure you want to delete?\")){\r\n            //ask before delete\r\n            try {\r\n                const deleteTodo = await fetch (`/api/v1/cliniclist/${id}`,{\r\n                    method: \"DELETE\"\r\n                });\r\n                await getClinicList();\r\n                //console.log(deleteTodo);\r\n            } catch (err) {\r\n                console.error(err.message)\r\n            }\r\n        }\r\n    }\r\n\r\n    if (sessionIsAdmin===true){\r\n    return (\r\n        <div>\r\n            <h4>{editId===\"\"?\"Add clinic\":\"Edit Clinic Entry\"}</h4>\r\n            {editId===\"\"?\"\":<button onClick={clearForm}>Add new clinic / clear form</button>}<br />\r\n            {editId===\"\"?\"\":`Change entry ${editId}`}\r\n\r\n            <form onSubmit={onSubmit}>\r\n                <div>\r\n                    <label>Set clinic name　</label>\r\n                    <input type=\"text\" value={clinicName} onChange={(e) => setClinicName(e.target.value)} list=\"clinicList\" placeholder=\"select from below OR type new clinic name\"></input>\r\n                    {prevClinicName?` (${prevClinicName})`:\"\"}\r\n                    <datalist id=\"clinicList\">\r\n                        {entries.map((data, idx ) => (\r\n                            <option key={`${data.clinic_name}ak47${idx}`} value={data.clinic_name}>{data.clinic_name}</option>\r\n                        ))}\r\n                    </datalist>\r\n                </div>\r\n                <div>\r\n                    <label>Set week day　</label>  \r\n                    <select name=\"weekday\" onChange={(e) => setWeekday(e.target.value)}>\r\n                        <option value=\"Monday\">Monday</option>\r\n                        <option value=\"Tuesday\">Tuesday</option>\r\n                        <option value=\"Wednesday\">Wednesday</option>\r\n                        <option value=\"Thursday\">Thursday</option>\r\n                        <option value=\"Friday\">Friday</option>\r\n                        <option value=\"-----\" disabled>--------</option>\r\n                        <option value=\"Saturday\" style={{color: \"blue\"}}>Saturday</option>\r\n                        <option value=\"Sunday\" style={{color: \"red\"}}>Sunday</option>\r\n                    </select>\r\n                    {prevWeekday?` (${prevWeekday})`:\"\"}\r\n                </div>\r\n                <div>\r\n                    <label>　AM　</label>  \r\n                    <input id=\"buttonAM\" type=\"radio\" value=\"AM\" name=\"ampm\" onChange={(e) => setAmpm(true)}/>\r\n                    <label>　PM　</label>  \r\n                    <input id=\"buttonPM\" type=\"radio\" value=\"PM\" name=\"ampm\" onChange={(e) => setAmpm(false)}/>\r\n                    {prevAmpm?` (${prevAmpm?\"AM\":\"PM\"})`:\"\"}\r\n                </div>\r\n                    <button>Submit</button>\r\n                <div>\r\n                {/* weekday */}\r\n                {/*ampm===true?\"true\":ampm===false?\"false\":\"null\"*/}\r\n                {/* password */}\r\n                </div>\r\n            </form>\r\n            <div>Note: There used to be a plan where the days set in the database would <a href=\"https://davidwalsh.name/demo/jqueryuicalpicker.jpg\">limit on the choice selectable</a> on the frontend calendar. However, it was discovered later that the function would be hard to implement across browsers and hence left on blueprints.</div>\r\n            <br />\r\n            <br />\r\n            <h4>Current list</h4>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        {titles.map((title, idx) => \r\n                            <th key={`${title.name}`} style={{padding: \"15px\"}}>{title.name}</th>\r\n                        )}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {entries.map((entry, idx) => \r\n                        <tr key={`x4${idx}`}>\r\n                            <td key={`${titles[0].name}x0${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[0].name}`]}</td>\r\n                            <td key={`${titles[1].name}x1${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[1].name}`]}</td>\r\n                            <td key={`${titles[2].name}x2${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[2].name}`]===true?\"am\":entry[`${titles[2].name}`]===false?\"pm\":\"\"}</td>\r\n                            <td key={`${titles[3].name}x3${idx}`} style={{padding: \"15px\"}}>{entry[`${titles[3].name}`]}</td>\r\n                            {/*<td key={`${titles[3].name}edit${idx}`} style={{padding: \"15px\"}} onClick={() => editClinic(idx)}><button>EDIT</button></td>*/}\r\n                            <td key={`${titles[3].name}gx4${idx}`} style={{padding: \"15px\"}} onClick={() => deleteClinic(entry.clinic_id)}><button>x</button></td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )} else {\r\n        return <div>Hello {sessionDisplayName}, you have no right to access this page. Please contact the admins for rights.</div>\r\n    }\r\n}\r\n\r\nexport default ClinicList","import React from 'react';\nimport { useState, useEffect } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport Navbar from \"./components/navbar\"\nimport DisplayTimeTable from \"./components/displayTimeTable\";\nimport CreateEntry from \"./components/create-entry\";\nimport Statistics from \"./components/statistics\";\nimport DoctorList from \"./components/doctorList\";\nimport ClinicList from \"./components/clinicList\";\n\n\nfunction App() {\n\n  const [userName, setUserName] = useState(\"jjj\");\n  const [isAdmin, setIsAdmin] = useState(false);\n  \n  const fetchLoginData = async () => {\n    try {\n       const loginData = await (await fetch(\"/authDetails\")).json()\n       //console.log(\"login data is \" + JSON.stringify(loginData))\n       await setUserName(loginData.doc_name)\n       await setIsAdmin(loginData.is_admin)\n       if(loginData.is_admin===\"true\") { setIsAdmin(true) }\n       if(loginData.doc_name===\"doc_name\")  { setUserName(\"unknown user\") }\n    } catch (err) {\n      console.error(err)\n    }\n\n  }\n\n  useEffect(() => {\n    fetchLoginData();\n  }, [])\n\n  return (\n    <Router>\n      <div className=\"container\">\n      <Navbar sessionIsAdmin={isAdmin} sessionDisplayName={userName} />\n      <br/>\n      {/* old routes for record and roll back\n      <Route path=\"/statistics\" component={Statistics} />\n      <Route path=\"/doctorlist\" component={DoctorList} isAdmin={isAdmin} displayName={userName} />\n      <Route path=\"/cliniclist\" component={ClinicList} isAdmin={isAdmin} displayName={userName} />  \n      */}\n      <Route path=\"/\" exact component={() => <DisplayTimeTable sessionIsAdmin={isAdmin} sessionDisplayName={userName} />} />\n      <Route path=\"/create\" component={() => <CreateEntry sessionIsAdmin={isAdmin} sessionDisplayName={userName} />} />\n      <Route path=\"/statistics\" component={Statistics} />\n      <Route path=\"/doctorlist\" component={() => <DoctorList sessionIsAdmin={isAdmin} sessionDisplayName={userName}  />}/>\n      <Route path=\"/cliniclist\" component={() => <ClinicList sessionIsAdmin={isAdmin} sessionDisplayName={userName}  />} /> \n     \n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}